#undef ZMK_BEHAVIORS_KEEP_ALL

#define ZMK_BEHAVIORS_KEEP_IND
#define ZMK_BEHAVIORS_KEEP_BT
#define ZMK_BEHAVIORS_KEEP_GRESC
#define ZMK_BEHAVIORS_KEEP_SYS_RESET
#define ZMK_BEHAVIORS_KEEP_BOOTLOADER
#define ZMK_BEHAVIORS_KEEP_CAPS_WORD
#define ZMK_BEHAVIORS_KEEP_KEY_REPEAT
#define ZMK_BEHAVIORS_KEEP_KT
#define ZMK_BEHAVIORS_KEEP_LT
#define ZMK_BEHAVIORS_KEEP_MT
#define ZMK_BEHAVIORS_KEEP_SK
#define ZMK_BEHAVIORS_KEEP_STICKY_LAYER
#define ZMK_BEHAVIORS_KEEP_TO
#define ZMK_BEHAVIORS_KEEP_TOG
#define ZMK_BEHAVIORS_KEEP_TRANS

#include <dt-bindings/zmk/indicators.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include "keys_uk_enhanced.h"

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt {
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
    hold-trigger-on-release;
};

/ {
macros {
    en_to_ua: LANG {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to 1 &kp CAPS>, <&macro_press>;

        label = "LANG";
    };

    ua_to_en: ua_to_0 {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to 0 &kp CAPS>;
        label = "UA_TO_0";
    };

    ua_to_nums: ua_to_nums {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to 2 &kp CAPS>;
        label = "UA_TO_NUMS";
    };

    nums_to_ua: nums_to_ua {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&to 1 &kp CAPS>;
        label = "NUMS_TO_UA";
    };
};

keymap {
    compatible = "zmk,keymap";

    english {
        bindings = <
&kp ESC           &kp B           &kp Y           &kp O               &kp U             &kp SQT          &kp SEMICOLON  &kp L              &kp D                &kp W            &kp V            &kp Z
&kp BACKSLASH     &mt LEFT_GUI C  &mt LEFT_ALT I  &mt LEFT_CONTROL E  &mt LEFT_SHIFT A  &kp COMMA        &kp PERIOD     &mt RIGHT_SHIFT H  &mt RIGHT_CONTROL T  &mt RIGHT_ALT S  &mt RIGHT_GUI N  &kp Q
&kp LEFT_BRACKET  &kp G           &kp X           &kp J               &kp K             &kp MINUS        &kp SLASH      &kp R              &kp M                &kp F            &kp P            &kp RIGHT_BRACKET
                                                  &kp LEFT_SHIFT      &kp TAB           &kp BACKSPACE    &kp SPACE      &kp ENTER          &en_to_ua
        >;

        sensor-bindings =
            <&inc_dec_kp C_VOL_DN C_VOL_UP>,
            <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
    };

    ukranian {
        bindings = <
&kp UK_CYRILLIC_SHORT_I  &kp UK_CYRILLIC_TSE          &kp UK_CYRILLIC_U            &kp UK_CYRILLIC_KA              &kp UK_CYRILLIC_IE             &trans    &trans  &kp UK_CYRILLIC_EN              &kp UK_CYRILLIC_GHE              &kp UK_CYRILLIC_SHA           &kp UK_CYRILLIC_ZE            &kp UK_CYRILLIC_HA
&kp UK_CYRILLIC_EF       &mt LEFT_GUI UK_UKRAINIAN_I  &mt LEFT_ALT UK_CYRILLIC_VE  &mt LEFT_CONTROL UK_CYRILLIC_A  &mt LEFT_SHIFT UK_CYRILLIC_PE  &trans    &trans  &mt RIGHT_SHIFT UK_CYRILLIC_ER  &mt RIGHT_CONTROL UK_CYRILLIC_O  &mt RIGHT_ALT UK_CYRILLIC_EL  &mt RIGHT_GUI UK_CYRILLIC_DE  &kp UK_CYRILLIC_ZHE
&kp UK_CYRILLIC_YA       &kp UK_CYRILLIC_CHE          &kp UK_CYRILLIC_ES           &kp UK_CYRILLIC_EM              &kp UK_CYRILLIC_I              &trans    &trans  &kp UK_CYRILLIC_TE              &kp UK_CYRILLIC_SOFT_SIGN        &kp UK_CYRILLIC_BE            &kp UK_CYRILLIC_YU            &kp UK_UKRAINIAN_IE
                                                                                   &ua_to_en                       &trans                         &trans    &trans  &trans                          &ua_to_nums
        >;

        sensor-bindings =
            <&inc_dec_kp C_VOL_DN C_VOL_UP>,
            <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
    };

    sumbols_and_numbs {
        bindings = <
&kp GRAVE  &none      &none      &kp LEFT_BRACE    &kp RIGHT_BRACE    &none            &none      &kp N7     &kp N8  &kp N9  &kp KP_MULTIPLY  &kp KP_DIVIDE
&none      &none      &none      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &none            &none      &kp N4     &kp N5  &kp N6  &kp KP_PLUS      &kp KP_MINUS
&kp LSHFT  &kp EQUAL  &kp MINUS  &kp KP_PLUS       &none              &none            &kp N0     &kp N1     &kp N2  &kp N3  &kp KP_COMMA     &kp DOT
                                 &nums_to_ua       &kp TAB            &kp BACKSPACE    &kp SPACE  &kp ENTER  &to 3
        >;

        sensor-bindings =
            <&inc_dec_kp C_VOL_DN C_VOL_UP>,
            <&inc_dec_kp C_BRI_UP C_BRI_DN>;
    };

    functional {
        bindings = <
&kp F1        &kp F2        &kp F3        &kp F4        &kp F5      &kp F6           &kp F7     &kp F8     &kp F9    &kp F10    &kp F11  &kp F12
&none         &kp INS       &kp PSCRN     &kp K_CMENU   &none       &none            &kp PG_UP  &kp HOME   &kp UP    &kp END    &none    &none
&out OUT_BLE  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &out OUT_USB     &kp PG_DN  &kp LEFT   &kp DOWN  &kp RIGHT  &kp DEL  &kp BSPC
                                          &to 2         &kp TAB     &kp BACKSPACE    &kp SPACE  &kp ENTER  &none
        >;

        sensor-bindings =
            <&inc_dec_kp C_VOL_DN C_VOL_UP>,
            <&inc_dec_kp C_BRI_UP C_BRI_DN>;
    };
};

};
